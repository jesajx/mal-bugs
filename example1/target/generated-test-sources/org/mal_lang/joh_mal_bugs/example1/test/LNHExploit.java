package org.mal_lang.joh_mal_bugs.example1.test;

import core.AttackStep;
import core.AttackStepMin;
import java.lang.Override;
import java.lang.String;
import java.util.HashSet;
import java.util.Set;

public class LNHExploit extends AutomaticExploit {
  public LowImpact lowImpact;

  public LNHExploit(String name) {
    super(name);
    assetClassName = "LNHExploit";
    AttackStep.allAttackSteps.remove(impact);
    impact = new Impact(name);
    AttackStep.allAttackSteps.remove(lowImpact);
    lowImpact = new LowImpact(name);
  }

  public LNHExploit() {
    this("Anonymous");
  }

  public class Impact extends Exploit.Impact {
    private Set<AttackStep> _cacheChildrenImpact;

    public Impact(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenImpact == null) {
        _cacheChildrenImpact = new HashSet<>();
        if (LNHExploit.this instanceof LNHExploit) {
          _cacheChildrenImpact.add(((org.mal_lang.joh_mal_bugs.example1.test.LNHExploit) LNHExploit.this).denyImpact);
        }
        _cacheChildrenImpact.add(lowImpact);
      }
      for (AttackStep attackStep : _cacheChildrenImpact) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (LNHExploit.this instanceof LNHExploit) {
        tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.LNHExploit) LNHExploit.this).denyImpact);
      }
      tmp.add(lowImpact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("LNHExploit.impact");
    }
  }

  public class LowImpact extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenLowImpact;

    private Set<AttackStep> _cacheParentLowImpact;

    public LowImpact(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenLowImpact == null) {
        _cacheChildrenLowImpact = new HashSet<>();
        if (LNHExploit.this instanceof LNHExploit) {
          _cacheChildrenLowImpact.add(((org.mal_lang.joh_mal_bugs.example1.test.LNHExploit) LNHExploit.this).readImpact);
        }
      }
      for (AttackStep attackStep : _cacheChildrenLowImpact) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (LNHExploit.this instanceof LNHExploit) {
        tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.LNHExploit) LNHExploit.this).readImpact);
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentLowImpact == null) {
        _cacheParentLowImpact = new HashSet<>();
        _cacheParentLowImpact.add(impact);
      }
      for (AttackStep attackStep : _cacheParentLowImpact) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("LNHExploit.lowImpact");
    }
  }
}
