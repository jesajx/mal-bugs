package org.mal_lang.joh_mal_bugs.example1.test;

import core.AttackStep;
import core.AttackStepMin;
import java.lang.Override;
import java.lang.String;
import java.util.HashSet;
import java.util.Set;

public class UnknownVulnerability extends Vulnerability {
  public RequestForgery requestForgery;

  public CodeExecution codeExecution;

  public AttemptObjectAccess attemptObjectAccess;

  public AttemptSystemAccess attemptSystemAccess;

  public Modify modify;

  public Deny deny;

  public Read read;

  private Set<Application> _cachereverseallUnknownVulnerabilitiesApplication;

  public UnknownVulnerability(String name, boolean isUserInteractsEnabled,
      boolean isRemoveEnabled) {
    super(name, isUserInteractsEnabled, isRemoveEnabled);
    assetClassName = "UnknownVulnerability";
    AttackStep.allAttackSteps.remove(impact);
    impact = new Impact(name);
    AttackStep.allAttackSteps.remove(requestForgery);
    requestForgery = new RequestForgery(name);
    AttackStep.allAttackSteps.remove(codeExecution);
    codeExecution = new CodeExecution(name);
    AttackStep.allAttackSteps.remove(attemptObjectAccess);
    attemptObjectAccess = new AttemptObjectAccess(name);
    AttackStep.allAttackSteps.remove(attemptSystemAccess);
    attemptSystemAccess = new AttemptSystemAccess(name);
    AttackStep.allAttackSteps.remove(modify);
    modify = new Modify(name);
    AttackStep.allAttackSteps.remove(deny);
    deny = new Deny(name);
    AttackStep.allAttackSteps.remove(read);
    read = new Read(name);
  }

  public UnknownVulnerability(String name) {
    super(name);
    assetClassName = "UnknownVulnerability";
    AttackStep.allAttackSteps.remove(impact);
    impact = new Impact(name);
    AttackStep.allAttackSteps.remove(requestForgery);
    requestForgery = new RequestForgery(name);
    AttackStep.allAttackSteps.remove(codeExecution);
    codeExecution = new CodeExecution(name);
    AttackStep.allAttackSteps.remove(attemptObjectAccess);
    attemptObjectAccess = new AttemptObjectAccess(name);
    AttackStep.allAttackSteps.remove(attemptSystemAccess);
    attemptSystemAccess = new AttemptSystemAccess(name);
    AttackStep.allAttackSteps.remove(modify);
    modify = new Modify(name);
    AttackStep.allAttackSteps.remove(deny);
    deny = new Deny(name);
    AttackStep.allAttackSteps.remove(read);
    read = new Read(name);
  }

  public UnknownVulnerability(boolean isUserInteractsEnabled, boolean isRemoveEnabled) {
    this("Anonymous", isUserInteractsEnabled, isRemoveEnabled);
  }

  public UnknownVulnerability() {
    this("Anonymous");
  }

  protected Set<Application> _reverseallUnknownVulnerabilitiesApplication() {
    if (_cachereverseallUnknownVulnerabilitiesApplication == null) {
      _cachereverseallUnknownVulnerabilitiesApplication = new HashSet<>();
      Set<Application> _0 = new HashSet<>();
      Set<Application> _1 = new HashSet<>();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
          for (Application _2 : ((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.softApplications) {
            _0.add(_2);
          }
        }
      }
      if (application != null) {
        _1.add(application);
      }
      _0.addAll(_1);
      for (Application _3 : _0) {
        _cachereverseallUnknownVulnerabilitiesApplication.add(_3);
      }
    }
    return _cachereverseallUnknownVulnerabilitiesApplication;
  }

  public class Impact extends Vulnerability.Impact {
    private Set<AttackStep> _cacheChildrenImpact;

    public Impact(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenImpact == null) {
        _cacheChildrenImpact = new HashSet<>();
        _cacheChildrenImpact.add(requestForgery);
        _cacheChildrenImpact.add(codeExecution);
        _cacheChildrenImpact.add(attemptObjectAccess);
        _cacheChildrenImpact.add(attemptSystemAccess);
        _cacheChildrenImpact.add(modify);
        _cacheChildrenImpact.add(deny);
        _cacheChildrenImpact.add(read);
      }
      for (AttackStep attackStep : _cacheChildrenImpact) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      tmp.add(requestForgery);
      tmp.add(codeExecution);
      tmp.add(attemptObjectAccess);
      tmp.add(attemptSystemAccess);
      tmp.add(modify);
      tmp.add(deny);
      tmp.add(read);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.impact");
    }
  }

  public class RequestForgery extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenRequestForgery;

    private Set<AttackStep> _cacheParentRequestForgery;

    public RequestForgery(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenRequestForgery == null) {
        _cacheChildrenRequestForgery = new HashSet<>();
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
            for (ConnectionRule _0 : ((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.appConnections) {
              _cacheChildrenRequestForgery.add(_0.transmit);
            }
          }
        }
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
            for (ConnectionRule _1 : ((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.appConnections) {
              _cacheChildrenRequestForgery.add(_1.transmitResponse);
            }
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenRequestForgery) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
          for (ConnectionRule _2 : ((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.appConnections) {
            tmp.add(_2.transmit);
          }
        }
      }
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
          for (ConnectionRule _3 : ((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.appConnections) {
            tmp.add(_3.transmitResponse);
          }
        }
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentRequestForgery == null) {
        _cacheParentRequestForgery = new HashSet<>();
        _cacheParentRequestForgery.add(impact);
      }
      for (AttackStep attackStep : _cacheParentRequestForgery) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.requestForgery");
    }
  }

  public class CodeExecution extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenCodeExecution;

    private Set<AttackStep> _cacheParentCodeExecution;

    public CodeExecution(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenCodeExecution == null) {
        _cacheChildrenCodeExecution = new HashSet<>();
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
            _cacheChildrenCodeExecution.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.codeExecutionAfterVulnerability);
          }
        }
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
            _cacheChildrenCodeExecution.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.compromiseApplication);
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenCodeExecution) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.codeExecutionAfterVulnerability);
        }
      }
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.compromiseApplication);
        }
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentCodeExecution == null) {
        _cacheParentCodeExecution = new HashSet<>();
        _cacheParentCodeExecution.add(impact);
      }
      for (AttackStep attackStep : _cacheParentCodeExecution) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.codeExecution");
    }
  }

  public class AttemptObjectAccess extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenAttemptObjectAccess;

    private Set<AttackStep> _cacheParentAttemptObjectAccess;

    public AttemptObjectAccess(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenAttemptObjectAccess == null) {
        _cacheChildrenAttemptObjectAccess = new HashSet<>();
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object != null) {
            _cacheChildrenAttemptObjectAccess.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object.bypassAccessControl);
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenAttemptObjectAccess) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object.bypassAccessControl);
        }
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentAttemptObjectAccess == null) {
        _cacheParentAttemptObjectAccess = new HashSet<>();
        _cacheParentAttemptObjectAccess.add(impact);
      }
      for (AttackStep attackStep : _cacheParentAttemptObjectAccess) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.attemptObjectAccess");
    }
  }

  public class AttemptSystemAccess extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenAttemptSystemAccess;

    private Set<AttackStep> _cacheParentAttemptSystemAccess;

    public AttemptSystemAccess(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenAttemptSystemAccess == null) {
        _cacheChildrenAttemptSystemAccess = new HashSet<>();
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).system != null) {
            _cacheChildrenAttemptSystemAccess.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).system.bypassAccessControl);
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenAttemptSystemAccess) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).system != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).system.bypassAccessControl);
        }
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentAttemptSystemAccess == null) {
        _cacheParentAttemptSystemAccess = new HashSet<>();
        _cacheParentAttemptSystemAccess.add(impact);
      }
      for (AttackStep attackStep : _cacheParentAttemptSystemAccess) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.attemptSystemAccess");
    }
  }

  public class Modify extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenModify;

    private Set<AttackStep> _cacheParentModify;

    public Modify(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenModify == null) {
        _cacheChildrenModify = new HashSet<>();
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
            _cacheChildrenModify.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.modify);
          }
        }
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
            _cacheChildrenModify.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.modifyApplication);
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenModify) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.modify);
        }
      }
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.modifyApplication);
        }
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentModify == null) {
        _cacheParentModify = new HashSet<>();
        _cacheParentModify.add(impact);
      }
      for (AttackStep attackStep : _cacheParentModify) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.modify");
    }
  }

  public class Deny extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenDeny;

    private Set<AttackStep> _cacheParentDeny;

    public Deny(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenDeny == null) {
        _cacheChildrenDeny = new HashSet<>();
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
            _cacheChildrenDeny.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.deny);
          }
        }
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
            _cacheChildrenDeny.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.denyApplication);
          }
        }
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object != null) {
            _cacheChildrenDeny.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object.deny);
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenDeny) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.deny);
        }
      }
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.denyApplication);
        }
      }
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).object.deny);
        }
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentDeny == null) {
        _cacheParentDeny = new HashSet<>();
        _cacheParentDeny.add(impact);
      }
      for (AttackStep attackStep : _cacheParentDeny) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.deny");
    }
  }

  public class Read extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenRead;

    private Set<AttackStep> _cacheParentRead;

    public Read(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenRead == null) {
        _cacheChildrenRead = new HashSet<>();
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
            _cacheChildrenRead.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.read);
          }
        }
        if (UnknownVulnerability.this instanceof UnknownVulnerability) {
          if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
            _cacheChildrenRead.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.readApplication);
          }
        }
      }
      for (AttackStep attackStep : _cacheChildrenRead) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).application.read);
        }
      }
      if (UnknownVulnerability.this instanceof UnknownVulnerability) {
        if (((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct != null) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.UnknownVulnerability) UnknownVulnerability.this).softwareProduct.readApplication);
        }
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentRead == null) {
        _cacheParentRead = new HashSet<>();
        _cacheParentRead.add(impact);
      }
      for (AttackStep attackStep : _cacheParentRead) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      tmp.add(impact);
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("UnknownVulnerability.read");
    }
  }
}
