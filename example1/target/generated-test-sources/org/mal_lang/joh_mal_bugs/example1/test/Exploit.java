package org.mal_lang.joh_mal_bugs.example1.test;

import core.Asset;
import core.AttackStep;
import core.AttackStepMin;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public abstract class Exploit extends Asset {
  public AttemptExploit attemptExploit;

  public Impact impact;

  public Vulnerability vulnerability = null;

  public Exploit(String name) {
    super(name);
    assetClassName = "Exploit";
    AttackStep.allAttackSteps.remove(attemptExploit);
    attemptExploit = new AttemptExploit(name);
    AttackStep.allAttackSteps.remove(impact);
    impact = new Impact(name);
  }

  public Exploit() {
    this("Anonymous");
  }

  public void addVulnerability(Vulnerability vulnerability) {
    this.vulnerability = vulnerability;
    vulnerability.exploits.add(this);
  }

  @Override
  public String getAssociatedAssetClassName(String field) {
    if (field.equals("vulnerability")) {
      return Vulnerability.class.getName();
    }
    return "";
  }

  @Override
  public Set<Asset> getAssociatedAssets(String field) {
    Set<Asset> assets = new HashSet<>();
    if (field.equals("vulnerability")) {
      if (vulnerability != null) {
        assets.add(vulnerability);
      }
    }
    return assets;
  }

  @Override
  public Set<Asset> getAllAssociatedAssets() {
    Set<Asset> assets = new HashSet<>();
    if (vulnerability != null) {
      assets.add(vulnerability);
    }
    return assets;
  }

  @Override
  public HashMap<String, HashSet<Asset>> getFields() {
    var fields = super.getFields();
    fields.put("vulnerability", new HashSet<Asset>());
    if (vulnerability != null) {
      fields.get("vulnerability").add(vulnerability);
    }
    return fields;
  }

  public class AttemptExploit extends AttackStepMin {
    private Set<AttackStep> _cacheChildrenAttemptExploit;

    private Set<AttackStep> _cacheParentAttemptExploit;

    public AttemptExploit(String name) {
      super(name);
    }

    @Override
    public void updateChildren(Set<AttackStep> attackSteps) {
      if (_cacheChildrenAttemptExploit == null) {
        _cacheChildrenAttemptExploit = new HashSet<>();
        if (vulnerability != null) {
          _cacheChildrenAttemptExploit.add(vulnerability.impact);
        }
      }
      for (AttackStep attackStep : _cacheChildrenAttemptExploit) {
        attackStep.updateTtc(this, ttc, attackSteps);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepChildren() {
      var tmp = super.getAttackStepChildren();
      if (vulnerability != null) {
        tmp.add(vulnerability.impact);
      }
      return tmp;
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentAttemptExploit == null) {
        _cacheParentAttemptExploit = new HashSet<>();
        if (vulnerability != null) {
          _cacheParentAttemptExploit.add(vulnerability.abuse);
        }
        if (vulnerability != null) {
          if (vulnerability instanceof AutomaticLowComplexityVulnerability) {
            _cacheParentAttemptExploit.add(((org.mal_lang.joh_mal_bugs.example1.test.AutomaticLowComplexityVulnerability) vulnerability).abuse);
          }
        }
        if (vulnerability != null) {
          if (vulnerability instanceof AutomaticHighComplexityVulnerability) {
            _cacheParentAttemptExploit.add(((org.mal_lang.joh_mal_bugs.example1.test.AutomaticHighComplexityVulnerability) vulnerability).abuse);
          }
        }
      }
      for (AttackStep attackStep : _cacheParentAttemptExploit) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      if (vulnerability != null) {
        tmp.add(vulnerability.abuse);
      }
      if (vulnerability != null) {
        if (vulnerability instanceof AutomaticLowComplexityVulnerability) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.AutomaticLowComplexityVulnerability) vulnerability).abuse);
        }
      }
      if (vulnerability != null) {
        if (vulnerability instanceof AutomaticHighComplexityVulnerability) {
          tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.AutomaticHighComplexityVulnerability) vulnerability).abuse);
        }
      }
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("Exploit.attemptExploit");
    }
  }

  public class Impact extends AttackStepMin {
    private Set<AttackStep> _cacheParentImpact;

    public Impact(String name) {
      super(name);
    }

    @Override
    public void setExpectedParents() {
      super.setExpectedParents();
      if (_cacheParentImpact == null) {
        _cacheParentImpact = new HashSet<>();
        if (Exploit.this instanceof AutomaticExploit) {
          _cacheParentImpact.add(((org.mal_lang.joh_mal_bugs.example1.test.AutomaticExploit) Exploit.this).attemptExploit);
        }
      }
      for (AttackStep attackStep : _cacheParentImpact) {
        addExpectedParent(attackStep);
      }
    }

    @Override
    public Set<AttackStep> getAttackStepParents() {
      var tmp = super.getAttackStepParents();
      if (Exploit.this instanceof AutomaticExploit) {
        tmp.add(((org.mal_lang.joh_mal_bugs.example1.test.AutomaticExploit) Exploit.this).attemptExploit);
      }
      return tmp;
    }

    @Override
    public double localTtc() {
      return ttcHashMap.get("Exploit.impact");
    }
  }
}
